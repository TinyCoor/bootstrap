//
// fibonacci recursive function
//

// N.B. this is how we define 'external' function prototypes
#foreign print := proc(format:string, values:...any);

@entry_point alpha::compiler::examples::main;

alpha::compiler::config := ns {
    test := enum {
        one;
        two;
        three;
    };

    fibonacci := ns {
        constant length_of_sequence:u32 := 1000;
    };

};

alpha::compiler::examples := ns {
    multi_return := proc():u64, address {
        return alloc(64);
    };

    fib := proc(n:u64 := 10):u64 {
        if n == 0 || n == 1 {
            return n;
        } else {
            value := fib((n - 1) + fib(n - 2));
            print(value);
            return value;
        };
    };

    main := proc():u32 {
        defer {
            final_fib_value:u32 := fib(
                alpha::compiler::config::fibonacci::length_of_sequence);
        };
        return final_fib_value;
    };

};
