//
// fibonacci recursive function
//

// N.B. this is how we define 'external' function prototypes

@library "libcompiler-rt.dll";
#foreign print := proc(format:string, values:...any) @alias "print";

alpha::compiler::config := ns {
    fibonacci := ns {
        constant length_of_sequence:u32 := 1000;
    };
};

alpha::compiler::examples := ns {
    count:u32;
    max: u16 := 32767;
    name:string := "this is a test";

    count := 1;

    fib := proc(n:u64 := 10):u64 {
        if n == 0 || n == 1 {
            return n;
        } else {
            value := fib((n - 1) + fib(n - 2));
            print(value);
            return value;
        };
    };

    main := proc():u32 {
        import alpha::compiler::config::fibonacci;
        final_fib_value := cast<u32>(fib(alpha::compiler::config::fibonacci::length_of_sequence));
    'the_end:
        return final_fib_value;
    } @entry_point;
};
