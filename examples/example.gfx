//
// fibonacci recursive function
//

// N.B. this is how we define 'external' function prototypes

@library "libcompiler-rt.dll";
#foreign print := proc(format:string, values:...any) @alias "print";

alpha::compiler::config := ns {
    fibonacci := ns {
        constant length_of_sequence := 1000;
    };

    vector3 := struct {
        x:f64;
        y:f64;
        z:f64;
    };
};

@foobar "baz";
alpha::compiler::examples := ns {
    count:u32;
    max:u16 := 32767;
    count := 1;
    is_this_true := count == (max == 256) && count == (max / 2);

    bar := proc() {
        bing(256);

        bing := proc(z:u64):u64 {
            if z == 0 {
                return 0;
            };
            return z / 2;
        };

        return;
    };
    @func_it 42;
    fib := proc(n:u64 := 10):u64 {
        @dont_fold_me_dude;
        if n == 0 || n == 1 {
            return n;
        } else {
            value := fib((n - 1) + fib(n - 2));
            print("%s\n", value);
            return value;
        };
    };

    fib_main := proc():u32 {
        import alpha::compiler::config::fibonacci;

        final_fib_value := cast<u32>(fib(alpha::compiler::config::fibonacci::length_of_sequence));

    'the_end:
        return final_fib_value;
    };

    fib_main();

};